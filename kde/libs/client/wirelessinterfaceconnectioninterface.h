/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -c WirelessInterfaceConnectionInterface -p wirelessinterfaceconnectioninterface /home/andreas/Programing/C++/network-manager-ipop/kde/libs/service/interfaces/org.kde.networkmanagement.wirelessinterfaceconnection.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef WIRELESSINTERFACECONNECTIONINTERFACE_H
#define WIRELESSINTERFACECONNECTIONINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.networkmanagement.WirelessInterfaceConnection
 */
class WirelessInterfaceConnectionInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.networkmanagement.WirelessInterfaceConnection"; }

public:
    WirelessInterfaceConnectionInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~WirelessInterfaceConnectionInterface();

    Q_PROPERTY(uint apCapabilities READ apCapabilities)
    inline uint apCapabilities() const
    { return qvariant_cast< uint >(property("apCapabilities")); }

    Q_PROPERTY(uint interfaceCapabilities READ interfaceCapabilities)
    inline uint interfaceCapabilities() const
    { return qvariant_cast< uint >(property("interfaceCapabilities")); }

    Q_PROPERTY(uint operationMode READ operationMode)
    inline uint operationMode() const
    { return qvariant_cast< uint >(property("operationMode")); }

    Q_PROPERTY(uint rsnFlags READ rsnFlags)
    inline uint rsnFlags() const
    { return qvariant_cast< uint >(property("rsnFlags")); }

    Q_PROPERTY(QString ssid READ ssid)
    inline QString ssid() const
    { return qvariant_cast< QString >(property("ssid")); }

    Q_PROPERTY(int strength READ strength)
    inline int strength() const
    { return qvariant_cast< int >(property("strength")); }

    Q_PROPERTY(uint wpaFlags READ wpaFlags)
    inline uint wpaFlags() const
    { return qvariant_cast< uint >(property("wpaFlags")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<uint> apCapabilities()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("apCapabilities"), argumentList);
    }

    inline QDBusPendingReply<uint> interfaceCapabilities()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("interfaceCapabilities"), argumentList);
    }

    inline QDBusPendingReply<uint> operationMode()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("operationMode"), argumentList);
    }

    inline QDBusPendingReply<uint> rsnFlags()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("rsnFlags"), argumentList);
    }

    inline QDBusPendingReply<QString> ssid()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ssid"), argumentList);
    }

    inline QDBusPendingReply<int> strength()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("strength"), argumentList);
    }

    inline QDBusPendingReply<uint> wpaFlags()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("wpaFlags"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void strengthChanged(int strength);
    void wicPropertiesChanged(const QVariantMap &properties);
};

#endif
