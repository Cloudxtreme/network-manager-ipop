/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -m -c InterfaceConnectionInterface -p interfaceconnectioninterface /home/andreas/Programing/C++/network-manager-ipop/kde/libs/service/interfaces/org.kde.networkmanagement.interfaceconnection.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef INTERFACECONNECTIONINTERFACE_H
#define INTERFACECONNECTIONINTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.networkmanagement.InterfaceConnection
 */
class InterfaceConnectionInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.networkmanagement.InterfaceConnection"; }

public:
    InterfaceConnectionInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~InterfaceConnectionInterface();

    Q_PROPERTY(uint activationState READ activationState)
    inline uint activationState() const
    { return qvariant_cast< uint >(property("activationState")); }

    Q_PROPERTY(bool hasDefaultRoute READ hasDefaultRoute)
    inline bool hasDefaultRoute() const
    { return qvariant_cast< bool >(property("hasDefaultRoute")); }

    Q_PROPERTY(QString iconName READ iconName)
    inline QString iconName() const
    { return qvariant_cast< QString >(property("iconName")); }

    Q_PROPERTY(QString name READ name)
    inline QString name() const
    { return qvariant_cast< QString >(property("name")); }

    Q_PROPERTY(uint type READ type)
    inline uint type() const
    { return qvariant_cast< uint >(property("type")); }

    Q_PROPERTY(QString uuid READ uuid)
    inline QString uuid() const
    { return qvariant_cast< QString >(property("uuid")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<uint> activationState()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("activationState"), argumentList);
    }

    inline QDBusPendingReply<QString> connectionName()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("connectionName"), argumentList);
    }

    inline QDBusPendingReply<int> connectionType()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("connectionType"), argumentList);
    }

    inline QDBusPendingReply<QString> connectionUuid()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("connectionUuid"), argumentList);
    }

    inline QDBusPendingReply<> deactivate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("deactivate"), argumentList);
    }

    inline QDBusPendingReply<QString> iconName()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("iconName"), argumentList);
    }

    inline QDBusPendingReply<uint> oldActivationState()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("oldActivationState"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void activationStateChanged(uint oldState, uint newState);
    void hasDefaultRouteChanged(bool hasDefaultRoute);
    void icPropertiesChanged(const QVariantMap &properties);
};

#endif
