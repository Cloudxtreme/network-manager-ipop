/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -m -p org_kde_solid_networking /home/andreas/Programing/C++/network-manager-ipop/kde/solidcontrolfuture/libs/solid/control/org.kde.Solid.Networking.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ORG_KDE_SOLID_NETWORKING_H
#define ORG_KDE_SOLID_NETWORKING_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.Solid.Networking
 */
class OrgKdeSolidNetworkingInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.Solid.Networking"; }

public:
    OrgKdeSolidNetworkingInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgKdeSolidNetworkingInterface();

    Q_PROPERTY(uint Status READ status)
    inline uint status() const
    { return qvariant_cast< uint >(property("Status")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> releaseConnection()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("releaseConnection"), argumentList);
    }

    inline QDBusPendingReply<uint> requestConnection()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("requestConnection"), argumentList);
    }

    inline QDBusPendingReply<uint> status()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("status"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void statusChanged(uint in0);
};

namespace org {
  namespace kde {
    namespace Solid {
      typedef ::OrgKdeSolidNetworkingInterface Networking;
    }
  }
}
#endif
